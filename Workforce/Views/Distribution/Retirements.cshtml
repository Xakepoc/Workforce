@using Workforce.Models
@model AgeDistribution
@{
    ViewBag.Title = "Retirements";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>Retirements</h2>
    <div class="row" style="margin-top: 30px;">
        <div class="col-xs-12 selector">
            <ul class="nav nav-pills">
                <li><a href="javascript:dc.filterAll();dc.renderAll();">Reset All Filters</a></li>
            </ul>
            <div class="clear"></div>
        </div>
        <div class="col-xs-12 col-lg-8">
            <div id="age-chart-percent" style="width:100%">
                <strong>Progression of retirements in percent</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a id="resetAgePercent" class="reset" href="" style="display: none;">reset</a>
                <div class="clearfix"></div>
            </div>
            <div id="age-chart-number" style="width:100%; margin-top: 15px;">
                <strong>Progression of retirements absolute</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a id="resetAgeNumber" class="reset" href="" style="display: none;">reset</a>
                <div class="clearfix"></div>
            </div>
            <div style="clear:both;"></div>
        </div>
        <div class="col-xs-12 col-lg-4">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-lg-12 chart-right">
                    <div id="chart-family">
                        <strong>Job Family</strong>
                        <a id="resetFamily" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-12 chart-right">
                    <div id="chart-function">
                        <strong>Job Function</strong>
                        <a id="resetFunction" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row"></div>
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-occupation">
                        <strong>Occupation Area</strong>
                        <a id="resetOccupation" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-location">
                        <strong>Location</strong>
                        <a id="resetLocation" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-group">
                        <strong>Job Group</strong>
                        <a id="resetGroup" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-level">
                        <strong>Job Level</strong>
                        <a id="resetLevel" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">

        $('.age-link').on('click', function(e) {
            $('.selector .active').removeClass('active');
            $(this).parent().addClass('active');
            var age = $(this).text();
            $('.current-age').text(age);
            Draw();
        });

        var mapo = _.compose(_.object, _.uniq, _.map);

        var employeesSrc = @Html.Raw(Json.Encode(Model.Employees));
        var jobFamilies = @Html.Raw(Json.Encode(Model.JobFamilies));
        var jobFunctions = @Html.Raw(Json.Encode(Model.JobFunctions));
        
        function Draw() {
            dc.filterAll();
            var critAge = parseInt($('.selector .active a').text());
            if (!critAge) critAge = 50;
            
            var containerMain = $('#age-chart-percent').parent();
            var containerRight = $('#chart-family').parent();
            var containerBottom = $('#chart-location').parent();
            var wMain = containerMain.width();
            var wRight = containerRight.width();
            var wBottom = containerBottom.width();
            
            var employees = [];
            _.each(employeesSrc, function(emp) {
                emp.Year = emp.PensionYear;
                employees.push(emp);
            });


            // Preparing data
            var ndx = crossfilter(employees);

            var yearDimension = ndx.dimension(function(emp) { return emp.Year; });
            var workforceGroup = function() {
                return yearDimension.group().reduce(
                    function(p, v) {
                        if (p.All == 0) {
                            p.All = _.unique(_.map(_.filter(employees, function(emp) { return emp.PensionYear >= v.Year; }), function(emp) { return emp.Id; })).length;
                        }
                        p.Total++;
                        p.Male += v.Gender == 'Male' ? 1 : 0;
                        p.Female += v.Gender == 'Female' ? 1 : 0;
                        return p;
                    },
                    function(p, v) {
                        if (p.All == 0) {
                            p.All = _.filter(employees, function(emp) { return emp.PensionYear >= v.Year; }).length;
                        }
                        p.Total--;
                        p.Male -= v.Gender == 'Male' ? 1 : 0;
                        p.Female -= v.Gender == 'Female' ? 1 : 0;
                        return p;
                    },
                    function() {
                        return { All: 0, Total: 0, Male: 0, Female: 0 };
                    });
            };

            var occupationDimension = ndx.dimension(function(emp) { return emp.OccupationArea; });
            var locationDimension = ndx.dimension(function(emp) { return emp.Location; });
            var groupDimension = ndx.dimension(function(emp) { return emp.JobGroup; });
            var familyDimension = ndx.dimension(function(emp) { return emp.JobFamily; });
            var functionDimension = ndx.dimension(function(emp) { return emp.JobFunction;  });
            var levelDimension = ndx.dimension(function(emp) { return emp.JobLevel; });

            var functionAdd = function(p, v) { if (!_.contains(p, v.Id)) p.push(v.Id); return p; };
            var functionRemove = function(p, v) { if (_.contains(p, v.Id)) p.splice(p.indexOf(v.Id), 1); return p;};
            var functionInitial = function() { return []; };
            var group = function(dimension, fnFilter) { var gr = fnFilter ? dimension.group(fnFilter) : dimension.group(); return gr.reduce(functionAdd, functionRemove, functionInitial); };

            var occupationGroup = group(occupationDimension);
            var locationGroup = group(locationDimension);
            var jobGroupGroup = group(groupDimension);
            var familyGroup = group(familyDimension, function(v) { if (_.contains(jobFamilies, v)) return v; });
            var functionGroup = group(functionDimension, function(v) { if (_.contains(jobFunctions, v)) return v; });
            var levelGroup = group(levelDimension);

            // Processing main charts

            var ageChartPercent = dc.barChart("#age-chart-percent");
            var ageChartNumber = dc.compositeChart("#age-chart-number");
            var xScale = d3.scale.linear().domain([2011, 2025]);

            ageChartPercent
                .width(wMain)
                .height(400)
                .margins({ top: 30, right: 50, bottom: 35, left: 30 })
                .dimension(yearDimension)
                .group(workforceGroup(), "Male")
                .valueAccessor(function(d) { return d.value.Male / d.value.All * 100; })
                .stack(workforceGroup(), "Female", function(d) { return d.value.Female / d.value.All * 100; })
                .title(function(d) {
                    return "Year " + d.x + "\n  Male: " + d.data.value.Male + " (" + (d.data.value.Male / d.data.value.All * 100).toPrecision(2) + "%)" +
                        "\n  Female: " + d.data.value.Female + " (" + (d.data.value.Female / d.data.value.All * 100).toPrecision(2) + "%)" +
                        "\n  Total: " + d.data.value.Total + "(" + (d.data.value.Total / d.data.value.All * 100).toPrecision(2) + "%)" + 
                        "\n  All employees: " + d.data.value.All;
                })
                .xAxisLabel('Year')
                .yAxisLabel('%')
                //.elasticX(true)
                .x(xScale)
                .xAxisPadding(2)
                .elasticY(true)
                .renderHorizontalGridLines(true)
                .legend(dc.legend().x(50).y(30).itemHeight(13).gap(5))
                .brushOn(false)
                .centerBar(false)
                .gap(3);
            ageChartPercent.xAxis().tickFormat(d3.format('.0f'));
            ageChartPercent.yAxis().tickFormat(function(v) {return v + "%";});

            ageChartNumber
                .width(wMain)
                .height(400)
                .margins({ top: 30, right: 50, bottom: 35, left: 30 })
                .dimension(yearDimension)
                .group(workforceGroup(), "Dummy")
                .compose([
                    dc.lineChart(ageChartNumber)
                        .group(workforceGroup(), "Total")
                        .valueAccessor(function(d) { return d.value.Total; })
                        .title(function(d) { return "Year: " + d.x + ", Total: " + d.y; })
                        .dotRadius(3)
                        .colors(["#ff0000"]),
                    dc.lineChart(ageChartNumber)
                        .group(workforceGroup(), "Male")
                        .valueAccessor(function(d) { return d.value.Male; })
                        .title(function(d) { return "Year: " + d.x + ", Male: " + d.y; })
                        .dotRadius(3)
                        .colors(["#1f77b4"])
                        .renderArea(true),
                    dc.lineChart(ageChartNumber)
                        .group(workforceGroup(), "Female")
                        .valueAccessor(function(d) { return d.value.Female; })
                        .title(function(d) { return "Year: " + d.x + ", Female: " + d.y; })
                        .dotRadius(3)
                        .colors(["#ff7f0e"])
                        .renderArea(true)
                ])
                .xAxisLabel('Year')
                .yAxisLabel('Number of Employees')
                //.elasticX(true)
                .x(xScale)
                .xAxisPadding(1)
                .elasticY(true)
                .renderHorizontalGridLines(true)
                .brushOn(false)
                .legend(dc.legend().x(50).y(30).itemHeight(13).gap(5))
                .renderlet(function (chart) {
                    chart.selectAll("circle").attr("style", "fill-opacity:0.8; stroke-opacity:0.8");
                    chart.selectAll("circle").on("mouseout", function(d) { d3.selectAll('g.dc-tooltip path').style("display", "none"); });
                })
                .filterPrinter(function (filters) {
                    var fLeft = Math.ceil(filters[0][0]), fRight = Math.floor(filters[0][1]);
                    return "Year " + fLeft + " - " + fRight;
                })
                .xAxis()
                .tickFormat(d3.format('.0f'));

            // Processing Other Charts

            var initPieChart = function(chart, dimension, gr) {
                return chart
                    .width(wBottom)
                    .height(180)
                    .radius(80)
                    .dimension(dimension)
                    .group(gr)
                    .valueAccessor(function(d) { return d.value.length; })
                    .colors(d3.scale.category20());
            };

            var initRowChart = function(chart, dimension, gr) {
                return chart
                    .width(wRight)
                    .height(410)
                    .dimension(dimension)
                    .group(gr)
                    .valueAccessor(function(d) {
                         return d.value.length;
                    })
                    .colors(d3.scale.category20());
            };

            var occupationChart = dc.pieChart("#chart-occupation");
            var locationChart = dc.pieChart("#chart-location");
            var groupChart = dc.pieChart("#chart-group");
            var familyChart = dc.rowChart("#chart-family");
            var functionChart = dc.rowChart("#chart-function");
            var levelChart = dc.pieChart("#chart-level");

            initPieChart(occupationChart, occupationDimension, occupationGroup);
            initPieChart(locationChart, locationDimension, locationGroup);
            initPieChart(groupChart, groupDimension, jobGroupGroup);
            initRowChart(familyChart, familyDimension, familyGroup);
            initRowChart(functionChart, functionDimension, functionGroup);
            initPieChart(levelChart, levelDimension, levelGroup);

            var fnReset = function(chart) {
                return function() { chart.filterAll(); dc.redrawAll(); return false; };
            };

            $('#resetAgePercent').on('click', fnReset(ageChartPercent));
            $('#resetAgeNumber').on('click', fnReset(ageChartNumber));
            $('#resetOccupation').on('click', fnReset(occupationChart));
            $('#resetLocation').on('click', fnReset(locationChart));
            $('#resetGroup').on('click', fnReset(groupChart));
            $('#resetFamily').on('click', fnReset(familyChart));
            $('#resetFunction').on('click', fnReset(functionChart));
            $('#resetLevel').on('click', fnReset(levelChart));

            dc.renderAll();
        }
        
        Draw();
        /*
        var id;
        $(window).resize(function(e) {
            clearTimeout(id);
            id = setTimeout(doneResizing, 500);
        });
        function doneResizing(){
            Draw();
        }*/
    </script>
}