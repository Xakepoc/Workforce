@using Workforce.Models
@model SkillDistribution
@{
    ViewBag.Title = "Skills Status";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>
        Skills Status 
        <span id="selector-critical" class="header-selector">
            <span class="header-selector-link" style="margin-left: 20px;">Critical</span>
            <span class="header-selector-link active">All</span>
        </span>
    </h2>
    <div class="row" style="margin-top: 30px;">
        <div id="selector-skillSet" class="selector col-xs-12">
            <h4>Select skill set:</h4>
            <ul class="nav nav-pills">
                <li><a class="selector-link" href="">Top</a></li>
                <li><a class="selector-link" href="">Gaps</a></li>
                <li><a id="selectorReset" href="javascript:dc.filterAll();dc.renderAll();">Reset All Filters</a></li>
            </ul>
            <div class="clear"></div>
        </div>
        <div class="col-xs-12 col-lg-8">
            <div id="chart-fulfillment" class="chartMain" style="width:100%">
                <strong>Skill fulfillment</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a id="resetFulfillment" class="reset" href="" style="display: none;">reset</a>
                <div class="clearfix"></div>
            </div>
            <br />
            <div id="chart-fulfillment-totals" class="chartMain" style="width:100%">
                <strong>Skill fulfillment Totals</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a id="resetFulfillmentTotals" class="reset" href="" style="display: none;">reset</a>
                <div class="clearfix"></div>
            </div>
            <div style="clear:both;"></div>
            <br />
            <strong>Employees ranked by best achievement</strong>
            <br />
            <div class="table-responsive">
                <table id="topEmployees" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Score</th>
                            <th>Job Family</th>
                            <th>Job Function</th>
                            <th>Occupation</th>
                            <th>Location</th>
                            <th>Job Group</th>
                            <th>Job Level</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div style="clear:both;"></div>
        </div>
        <div class="col-xs-12 col-lg-4">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-lg-12 chart-right">
                    <div id="chart-skill" class="chartRight">
                        <strong>Skill</strong>
                        <a id="resetSkill" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-12 chart-right">
                    <div id="chart-family" class="chartRight">
                        <strong>Job Family</strong>
                        <a id="resetFamily" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-12 chart-right">
                    <div id="chart-function" class="chartRight">
                        <strong>Job Function</strong>
                        <a id="resetFunction" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row"></div>
        <div class="col-xs-12" style="margin-top: 20px;">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-occupation" class="chartBottom">
                        <strong>Occupation Area</strong>
                        <a id="resetOccupation" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-location" class="chartBottom">
                        <strong>Location</strong>
                        <a id="resetLocation" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-group" class="chartBottom">
                        <strong>Job Group</strong>
                        <a id="resetGroup" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-lg-3 chart-right">
                    <div id="chart-level" class="chartBottom">
                        <strong>Job Level</strong>
                        <a id="resetLevel" class="reset" href="" style="display: none;">reset</a>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script id="tplRowEmployee" type="text/template">
    <tr uid="{{Id}}">
        <td>{{Name}}</td>
        <td>{{Score}}%</td>
        <td>{{JobFamily}}</td>
        <td>{{JobFunction}}</td>
        <td>{{Occupation}}</td>
        <td>{{Location}}</td>
        <td>{{JobGroup}}</td>
        <td>{{JobLevel}}</td>
    </tr>    
</script>

@section Scripts
{
    <script type="text/javascript">
        
        $(document).on('click', '.selector-link', function(e) {
            e.preventDefault();
            if ($(this).parent().hasClass('active')) return;
            $('#selector-skillSet .active').removeClass('active');
            $(this).parent().addClass('active');
            Draw();
        });
        $(document).on('click', '#selector-critical .header-selector-link', function(e) {
            e.preventDefault();
            if ($(this).hasClass('active')) return;
            $('#selector-critical .active').removeClass('active');
            $(this).addClass('active');
            isCritical = $(this).text() == "Critical";
            Draw();
        });
        
        _.tpl = function(tpl, model) {
            var localTpl = tpl;
            for (var key in model) {
                var regex = new RegExp('{{' + key + '}}', 'g');
                localTpl = localTpl.replace(regex, model[key]);
            }
            return localTpl;
        };

        var mapo = _.compose(_.object, _.uniq, _.map);

        var src = @Html.Raw(Json.Encode(Model.EmployeeSkills));
        var jobFamilies = @Html.Raw(Json.Encode(Model.JobFamilies));
        var jobFunctions = @Html.Raw(Json.Encode(Model.JobFunctions));
        var skillSets = @Html.Raw(Json.Encode(Model.SkillSets));
        var sets = _.map(skillSets, function(set) { return { Id: set.Id, Name: set.Name }; }).reverse();
        var skillsAll = _.flatten(_.map(skillSets, function(ss) {
            _.each(ss.Skills, function(s) {
                s.SkillSet = ss.Name;
                s.SkillSetId = ss.Id;
            });
            return ss.Skills;
        }));
        var employeesFiltered = [];
        var isCritical = false;
        
        _.each(sets, function(set, i) {
            var li = $('<li><a class="selector-link" href="">' + set.Name + '</a></li>');
            if (i == sets.length - 1) li.addClass("active");
            $('#selector-skillSet ul').prepend(li);
        });
        
        var GetSkillIndex = function(arr, id) { return _.indexOf(arr, _.find(arr, function(s) { return s.SkillId == id; })); };
        var GetSkillTitle = function(arr, id) { return arr[id].Name; };
        
        function Draw() {
            dc.filterAll();
            var skillSet = $('#selector-skillSet .active a').text();
            var skills = _.filter(skillsAll, function(s) { return isCritical ? s.IsCritical : true; });
            switch(skillSet) {
                case 'Top':  skills = _.first(_.sortBy(skills, function(s) { return s.Fulfillment; }).reverse(), 7); break;
                case 'Gaps': skills = _.first(_.sortBy(skills, function(s) { return s.Fulfillment; }), 7); break;
                default:     skills = _.filter(skills, function(s) { return s.SkillSet == skillSet; }); break;
            }
            
            var containerMain = $('.chartMain').first().parent();
            var containerRight = $('.chartRight').first().parent();
            var containerBottom = $('.chartBottom').first().parent();
            var wMain = containerMain.width();
            var wRight = containerRight.width();
            var wBottom = containerBottom.width();
            
            var employees = [];
            var skillIndexes = _.map(skills, function(s) { return s.SkillId; });
            _.each(src, function(e) {
                if (!_.contains(skillIndexes, e.SkillId)) return;
                e.SkillIndex = GetSkillIndex(skills, e.SkillId);
                employees.push(e);
            });
            
            // Preparing data
            var ndx = crossfilter(employees);

            var skillDimension = ndx.dimension(function(emp) { return emp.SkillIndex; });
            var skillGroup = function() {
                return skillDimension.group().reduce(
                    function(p, v) {
                        p.Total++;
                        p.Male += v.Gender == 'Male' ? 1 : 0;
                        p.Female += v.Gender == 'Female' ? 1 : 0;
                        p.Rating += v.Rating;
                        p.MaleRating += v.Gender == 'Male' ? v.Rating : 0;
                        p.FemaleRating += v.Gender == 'Female' ? v.Rating : 0;
                        if (v.Gender == 'Male') p.EmpsMale.push(v.Id);
                        if (v.Gender == 'Female') p.EmpsFemale.push(v.Id);
                        if (!_.contains(employeesFiltered, v)) employeesFiltered.push(v);
                        return p;
                    },
                    function(p, v) {
                        p.Total--;
                        p.Male -= v.Gender == 'Male' ? 1 : 0;
                        p.Female -= v.Gender == 'Female' ? 1 : 0;
                        p.Rating -= v.Rating;
                        p.MaleRating -= v.Gender == 'Male' ? v.Rating : 0;
                        p.FemaleRating -= v.Gender == 'Female' ? v.Rating : 0;
                        if (v.Gender == 'Male') p.EmpsMale.splice(p.EmpsMale.indexOf(v.Id), 1);
                        if (v.Gender == 'Female') p.EmpsFemale.splice(p.EmpsFemale.indexOf(v.Id), 1);
                        if (_.contains(employeesFiltered, v)) employeesFiltered.splice(employeesFiltered.indexOf(v), 1);
                        
                        return p;
                    },
                    function() {
                        return { Rating: 0, MaleRating: 0, FemaleRating: 0, Total: 0, Male: 0, Female: 0, EmpsMale:[], EmpsFemale:[] };
                    });
            };
            
            var skillNameDimension = ndx.dimension(function(emp) { return emp.SkillName; });
            var occupationDimension = ndx.dimension(function(emp) { return emp.OccupationArea; });
            var locationDimension = ndx.dimension(function(emp) { return emp.Location; });
            var groupDimension = ndx.dimension(function(emp) { return emp.JobGroup; });
            var familyDimension = ndx.dimension(function(emp) { return emp.JobFamily; });
            var functionDimension = ndx.dimension(function(emp) { return emp.JobFunction;  });
            var levelDimension = ndx.dimension(function(emp) { return emp.JobLevel; });
            
            var functionAdd = function(p, v) { p.Total++; p.Rating += v.Rating; p.Emps.push(v.Id); return p; };
            var functionRemove = function(p, v) { p.Total--; p.Rating -= v.Rating; p.Emps.splice(p.Emps.indexOf(v.Id), 1); return p;};
            var functionInitial = function() { return { Rating: 0, Total: 0, Emps: []}; };
            var group = function(dimension, fnFilter) { var gr = fnFilter ? dimension.group(fnFilter) : dimension.group(); return gr.reduce(functionAdd, functionRemove, functionInitial); };

            var skillNameGroup = group(skillNameDimension);
            var occupationGroup = group(occupationDimension);
            var locationGroup = group(locationDimension);
            var jobGroupGroup = group(groupDimension);
            //var familyGroup = group(familyDimension, function(v) { if (_.contains(jobFamilies, v)) return v; });
            var familyGroup = group(familyDimension);
            //var functionGroup = group(functionDimension, function(v) { if (_.contains(jobFunctions, v)) return v; });
            var functionGroup = group(functionDimension);
            var levelGroup = group(levelDimension);

            // Processing main charts
            var scaleSkills = d3.scale.linear().domain([0, skills.length]);
            var scalePercent = d3.scale.linear().domain([0, 100]);
            var ticks = _.range(skills.length);
            
            // calculate translates for bar charts
            var marginRight = 50, marginLeft = 33;
            var k = 3; // number of bars
            var w = (wMain - marginLeft - marginRight) / skills.length; // column width
            var colRightMargin = w / 5, colLeftMargin = w / 10; // left and right column margins
            var wEff = w - colLeftMargin - colRightMargin; // effective column width
            var barMargin = (wEff/k)*(0.25), translate = wEff / k; // margin between bars and translate
            var wBarEff = wEff / k - barMargin; // effective bar width
            var t1 = colLeftMargin + translate * 0, t2 = colLeftMargin + translate * 1, t3 = colLeftMargin + translate*2;
            
            var chartFulfillment = dc.compositeChart("#chart-fulfillment");
            chartFulfillment
                .width(wMain)
                .height(400)
                .transitionDuration(0)
                .margins({ top: 30, right: marginRight, bottom: 35, left: marginLeft })
                .dimension(skillDimension)
                .group(skillGroup(), "Rating")
                .valueAccessor(function(d) { return d.value.Rating / (5 * d.value.Total) * 100; })
                .title(function(d) {
                    return GetSkillTitle(skills, d.x) + "\n  Rating: " + (d.data.value.Rating / (5 * d.data.value.Total) * 100).toPrecision(3) + "%";
                })
                .yAxisLabel('Fulfillment, %')
                .x(scaleSkills)
                .y(scalePercent)
                //.elasticY(true)
                .renderHorizontalGridLines(true)
                .brushOn(false)
                .legend(dc.legend().x(55).y(30).itemHeight(13).gap(5))
                .renderlet(function (chart) {
                    chart.selectAll("g.sub._0").attr("transform", "translate(" + t1 + ", 0)");
                    chart.selectAll("g.sub._1").attr("transform", "translate(" + t2 + ", 0)");
                    chart.selectAll("g.sub._2").attr("transform", "translate(" + t3 + ", 0)");
                    chart.selectAll("g.stack rect").attr("width", wBarEff);
                })
                .compose([
                    dc.barChart(chartFulfillment).group(skillGroup(), "Total")
                        .title(function(d) { return "Total \n  Fulfillment: " + (d.data.value.Rating / (5 * d.data.value.Total) * 100).toPrecision(3) + '%'; }).colors(['#2ca02c'])
                        .valueAccessor(function(d) { return d.value.Rating / (5 * d.value.Total) * 100; }),
                    dc.barChart(chartFulfillment).group(skillGroup(), "Male")
                        .title(function(d) { return "Male \n  Fulfillment: " + (d.data.value.MaleRating / (5 * d.data.value.Male) * 100).toPrecision(3) + '%'; }).colors(['#1f77b4'])
                        .valueAccessor(function(d) { return d.value.MaleRating / (5 * d.value.Male) * 100; }),
                    dc.barChart(chartFulfillment).group(skillGroup(), "Female")
                        .title(function(d) { return "Female \n  Fulfillment: " + (d.data.value.FemaleRating / (5 * d.data.value.Female) * 100).toPrecision(3) + '%'; }).colors(['#ff7f0e'])
                        .valueAccessor(function(d) { return d.value.FemaleRating / (5 * d.value.Female) * 100; })
                ])
                .on('postRender', function(chart) {
                    var x = wEff / 1.5;
                    chart.svg()
                        .select('.axis.x')
                        .selectAll("text")
                        .attr("transform", function(i) { return "translate (" + x + ", " + (i % 2 == 0 ? 0 : 15) + ")"; });
                });
            chartFulfillment.xAxis().tickValues(ticks).tickFormat(function(v) {
                if (v < 0 || v >= skills.length) return '';
                return GetSkillTitle(skills, v);
            });
            chartFulfillment.yAxis().tickFormat(function(v) {return v + "%";});
            
            var chartFulfillmentTotals = dc.barChart("#chart-fulfillment-totals");
            chartFulfillmentTotals
                .width(wMain)
                .height(400)
                .transitionDuration(0)
                .margins({ top: 30, right: marginRight, bottom: 35, left: marginLeft })
                .dimension(skillDimension)
                .group(skillGroup(), "Male")
                .valueAccessor(function(d) { return _.uniq(d.value.EmpsMale).length; })
                .stack(skillGroup(), "Female", function(d) { return _.uniq(d.value.EmpsFemale).length; })
                .title(function(d) {
                    return GetSkillTitle(skills, d.x) +
                        "\n  Male: " + _.uniq(d.data.value.EmpsMale).length + " / " + (d.data.value.MaleRating / (5 * d.data.value.Male) * 100).toPrecision(3) + '%' +
                        "\n  Female: " + _.uniq(d.data.value.EmpsFemale).length + " / " + (d.data.value.FemaleRating / (5 * d.data.value.Female) * 100).toPrecision(3) + '%' +
                        "\n  Total: " + (_.uniq(d.data.value.EmpsMale).length + _.uniq(d.data.value.EmpsFemale).length) + " / " + (d.data.value.Rating / (5 * d.data.value.Total) * 100).toPrecision(3) + '%';
                })
                .yAxisLabel('Number of Employees')
                .x(scaleSkills)
                .elasticY(true)
                .gap(2*wEff / 3)
                .renderlet(function (chart) {
                    chart.selectAll("g._0").attr("transform", "translate(" + wEff / 3 + ", 0)");
                    chart.selectAll("g._1").attr("transform", "translate(" + wEff / 3 + ", 0)");
                })
                .renderHorizontalGridLines(true)
                .brushOn(false)
                .legend(dc.legend().x(55).y(30).itemHeight(13).gap(5))
                .on('postRender', function(chart) {
                    var x = wEff / 1.5;
                    chart.svg()
                        .select('.axis.x')
                        .selectAll("text")
                        .attr("transform", function(i) { return "translate (" + x + ", " + (i % 2 == 0 ? 0 : 15) + ")"; });
                });
            chartFulfillmentTotals.xAxis().tickValues(ticks).tickFormat(function(v) {
                if (v < 0 || v >= skills.length) return '';
                return GetSkillTitle(skills, v);
            });
            
            var filterEmployees = function(chart, filter) {
                var topEmployees = _.chain(employeesFiltered)
                    .groupBy(function(emp) { return emp.Id; })
                    .map(function(emps, id) {
                        return {
                            Id: id,
                            RowNum: 0,
                            Name: "#" + id,
                            Score: parseFloat((_.reduce(emps, function(memo, emp) { return memo + emp.Rating; }, 0) / (5 * emps.length) * 100).toPrecision(3)),
                            JobFamily: emps[0].JobFamily,
                            JobFunction: emps[0].JobFunction,
                            Occupation: emps[0].OccupationArea,
                            Location: emps[0].Location,
                            JobGroup: emps[0].JobGroup,
                            JobLevel: emps[0].JobLevel
                        };
                    })
                    .sortBy(function(emp) { return emp.Score; })
                    .last(15)
                    .value()
                    .reverse();
                
                var table = $('#topEmployees tbody');
                table.children().remove();
                _.each(topEmployees, function(emp) {
                    table.append(_.tpl($('#tplRowEmployee').html(), emp));
                });
            };

            // Processing Other Charts

            var initPieChart = function(chart, dimension, gr) {
                return chart
                    .width(wBottom)
                    .height(180)
                    .radius(80)
                    .dimension(dimension)
                    .group(gr)
                    .valueAccessor(function(d) { return d.value.Total == 0 ? 0 : d.value.Rating / (5 * d.value.Total) * 100; })
                    .title(function(d) { return d.data.key + " - Total: " + _.uniq(d.value.Emps).length + ", Score: " + (d.value).toPrecision(3) + '%'; })
                    .colors(d3.scale.category20())
                    .on("filtered", filterEmployees);
            };

            var initRowChart = function(chart, dimension, gr) {
                var ch = chart
                    .width(wRight)
                    .height(310)
                    .dimension(dimension)
                    .group(gr)
                    .valueAccessor(function(d) { return d.value.Total == 0 ? 0.0 : d.value.Rating / (5 * d.value.Total) * 100; })
                    .title(function(d) { return (d.key ? d.key : "Empty") + " - Total: " + _.uniq(d.value.Emps).length + ", Score: " + (d.value.Rating / (5 * d.value.Total) * 100).toPrecision(3) + '%'; })
                    //.ordering(function(d) { return d.value.Rating / (5 * d.value.Total); })
                    //.x(d3.scale.linear().domain([0,100]))
                    .elasticX(false)
                    .colors(d3.scale.category20())
                    .on("filtered", filterEmployees);
                return ch;
            };

            var skillChart = dc.rowChart("#chart-skill");
            var occupationChart = dc.pieChart("#chart-occupation");
            var locationChart = dc.pieChart("#chart-location");
            var groupChart = dc.pieChart("#chart-group");
            var familyChart = dc.rowChart("#chart-family");
            var functionChart = dc.rowChart("#chart-function");
            var levelChart = dc.pieChart("#chart-level");

            initRowChart(skillChart, skillNameDimension, skillNameGroup).height(skills.length*30).labelOffsetY(7 + skills.length);
            initPieChart(occupationChart, occupationDimension, occupationGroup);
            initPieChart(locationChart, locationDimension, locationGroup);
            initPieChart(groupChart, groupDimension, jobGroupGroup);
            initRowChart(familyChart, familyDimension, familyGroup).height(familyGroup.all().length*20).labelOffsetY(11);
            initRowChart(functionChart, functionDimension, functionGroup).height(functionGroup.all().length*20).labelOffsetY(11);
            initPieChart(levelChart, levelDimension, levelGroup);
            
            var fnReset = function(chart) {
                return function() { chart.filterAll(); dc.redrawAll(); return false; };
            };

            $('#resetFulfillment').on('click', fnReset(chartFulfillment));
            $('#resetSkill').on('click', fnReset(skillChart));
            $('#resetOccupation').on('click', fnReset(occupationChart));
            $('#resetLocation').on('click', fnReset(locationChart));
            $('#resetGroup').on('click', fnReset(groupChart));
            $('#resetFamily').on('click', fnReset(familyChart));
            $('#resetFunction').on('click', fnReset(functionChart));
            $('#resetLevel').on('click', fnReset(levelChart));

            dc.renderAll();
            filterEmployees();
        }
        
        Draw();
    /*
        var id;
        $(window).resize(function(e) {
            clearTimeout(id);
            id = setTimeout(doneResizing, 500);
        });
        function doneResizing(){
            Draw();
        }*/
    </script>
}
