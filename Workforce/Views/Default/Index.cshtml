@using Workforce.Models
@model AgeDistribution
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>Progression of Age Groups 50+ and 55+</h2>
    <div class="row" style="margin-top: 30px;">
        <div class="col-xs-12 col-lg-8">
            <div id="age-chart-distribution" style="width:100%">
                <strong>Progression of workforce age groups 50+</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:ageChartPercent.filterAll();dc.redrawAll();"
                    style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-distribution2" style="width:100%">
                <strong>Progression of workforce age groups 50+</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:ageChartNumber.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
        </div>
        <div class="col-xs-12 col-lg-4">
            <div id="age-chart-occupation">
                <strong>Occupation Area</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:occupationChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-location">
                <strong>Location</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:locationChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-group">
                <strong>Job Group</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:groupChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-family">
                <strong>Job Family</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:familyChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-function">
                <strong>Job Function</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:functionChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
            <div id="age-chart-level">
                <strong>Job Level</strong>
                <span class="reset" style="display: none;">range: <span class="filter"></span></span>
                <a class="reset" href="javascript:levelChart.filterAll();dc.redrawAll();"
                   style="display: none;">reset</a>

                <div class="clearfix"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        var containerMain = $('#age-chart-distribution').parent();
        var containerRight = $('#age-chart-location').parent();
        var wMain = containerMain.width();
        var wRight = containerRight.width();

        var ageChartPercent = dc.barChart("#age-chart-distribution");
        var ageChartNumber = dc.compositeChart("#age-chart-distribution2");

        var mapo = _.compose(_.object, _.uniq, _.map);

        var data = @Html.Raw(Json.Encode(Model.Results));
        var employeesSrc = @Html.Raw(Json.Encode(Model.Employees));
        //var employeesMap = mapo(employeesSrc, function(emp) { return [emp.CriticalYear, _.filter(employeesSrc, function(e) { return e.CriticalYear <= emp.CriticalYear && e.PensionYear > emp.CriticalYear; })]; });
        var employees = [];
        _.each(employeesSrc, function(emp) { // create set of employees for each year
            for (var i = emp.CriticalYear; i < emp.PensionYear; i++) {
                var e = _.clone(emp);
                e.Year = i;
                employees.push(e);
            }
        });
        
        //var locations = mapo(data, function(item) { return [item.Location, 0]; });
        
        // feed it through crossfilter
        var ndx = crossfilter(employees);

        // define group all for counting
        var all = ndx.groupAll();

        var yearDimension = ndx.dimension(function(emp) { return emp.Year; });
        var testest = yearDimension.group().all();
        var workforceGroup = function() {
            return yearDimension.group().reduce(
                function(p, v) {
                    if (p.All == 0) {
                        p.All = _.unique(_.map(_.filter(employees, function(emp) { return emp.PensionYear > v.Year; }), function(emp){ return emp.Id;})).length;
                    }
                    p.Total++;
                    p.Male += v.Gender == 'Male' ? 1 : 0;
                    p.Female += v.Gender == 'Female' ? 1 : 0;
                    return p;
                },
                function(p, v) {
                    if (p.All == 0) {
                        p.All = _.filter(employees, function(emp) { return emp.PensionYear > v.Year; }).length;
                    }
                    p.Total--;
                    p.Male -= v.Gender == 'Male' ? 1 : 0;
                    p.Female -= v.Gender == 'Female' ? 1 : 0;
                    return p;
                },
                function() {
                    return {
                        All: 0,
                        Total: 0,
                        Male: 0,
                        Female: 0
                    };
                });
        };
        
        var occupationDimension = ndx.dimension(function(emp) { return emp.OccupationArea; });
        var locationDimension = ndx.dimension(function(emp) { return emp.Location; });
        var groupDimension = ndx.dimension(function(emp) { return emp.JobGroup; });
        var familyDimension = ndx.dimension(function(emp) { return emp.JobFamily; });
        var functionDimension = ndx.dimension(function(emp) { return emp.JobFunction; });
        var levelDimension = ndx.dimension(function(emp) { return emp.JobLevel; });

        var functionAdd = function(p, v) { if (!_.contains(p, v.Id)) p.push(v.Id); return p; };
        var functionRemove = function(p, v) { if (_.contains(p, v.Id)) p.splice(p.indexOf(v.Id), 1); return p; };
        var functionInitial = function() { return []; };
        var group = function(dimension) { return dimension.group().reduce(functionAdd, functionRemove, functionInitial); };

        var occupationGroup = group(occupationDimension);
        var locationGroup = group(locationDimension);
        var jobGroupGroup = group(groupDimension);
        var familyGroup = group(familyDimension);
        var functionGroup = group(functionDimension);
        var levelGroup = group(levelDimension);
        
        var xScale = d3.scale.linear().domain([2010, 2025]);

        ageChartPercent
            .width(wMain)
            .height(400)
            .margins({ top: 30, right: 50, bottom: 25, left: 40 })
            .dimension(yearDimension)
            .group(workforceGroup(), "Male")
            .valueAccessor(function(d) { return d.value.Male / d.value.All * 100; })
            .stack(workforceGroup(), "Female", function(d) { return d.value.Female / d.value.All * 100; })
            .title(function(d) {
                return "Year " + d.x + "\n  Male: " + d.data.value.Male + " (" + (d.data.value.Male / d.data.value.All * 100).toPrecision(3) + "%)" +
                    "\n  Female: " + d.data.value.Female + " (" + (d.data.value.Female / d.data.value.All * 100).toPrecision(3) + "%)" +
                    "\n  Total: " + d.data.value.Total + "(" + (d.data.value.Total / d.data.value.All * 100).toPrecision(3) + "%)";
            })
            .elasticX(true)
            .x(xScale)
            .xAxisPadding(1)
            .elasticY(true)
            .renderHorizontalGridLines(true)
            .legend(dc.legend().x(50).y(30).itemHeight(13).gap(5))
            .brushOn(false)
            .centerBar(false)
            .gap(3)
            .xAxis()
            .tickFormat(d3.format('.0f'));

        ageChartNumber
            .width(wMain)
            .height(400)
            .margins({ top: 30, right: 50, bottom: 25, left: 40 })
            .dimension(yearDimension)
            .group(workforceGroup(), "Dummy")
            .compose([
                dc.lineChart(ageChartNumber)
                    .group(workforceGroup(), "Total")
                    .valueAccessor(function(d) { return d.value.Total; })
                    .title(function(d) { return "Year: " + d.x + ", Total: " + d.y; })
                    .colors(["#ff0000"]),
                dc.lineChart(ageChartNumber)
                    .group(workforceGroup(), "Male")
                    .valueAccessor(function(d) { return d.value.Male; })
                    .title(function(d) { return "Year: " + d.x + ", Male: " + d.y; })
                    .colors(["#1f77b4"])
                    .renderArea(true),
                dc.lineChart(ageChartNumber)
                    .group(workforceGroup(), "Female")
                    .valueAccessor(function(d) { return d.value.Female; })
                    .title(function(d) { return "Year: " + d.x + ", Female: " + d.y; })
                    .colors(["#ff7f0e"])
                    .renderArea(true)
            ])
            .elasticX(true)
            .x(xScale)
            .xAxisPadding(1)
            .elasticY(true)
            .renderHorizontalGridLines(true)
            .legend(dc.legend().x(50).y(30).itemHeight(13).gap(5))
            .brushOn(false)
            .xAxis()
            .tickFormat(d3.format('.0f'));

        var initPieChart = function(chart, dimension, group) {
            return chart
                .width(wRight)
                .height(180)
                .radius(80)
                .dimension(dimension)
                .group(group)
                .valueAccessor(function(d){ return d.value.length;});
        };
        
        initPieChart(dc.pieChart("#age-chart-occupation"), occupationDimension, occupationGroup);
        initPieChart(dc.pieChart("#age-chart-location"), locationDimension, locationGroup);
        initPieChart(dc.pieChart("#age-chart-group"), groupDimension, jobGroupGroup);
        initPieChart(dc.pieChart("#age-chart-family"), familyDimension, familyGroup);
        initPieChart(dc.pieChart("#age-chart-function"), functionDimension, functionGroup);
        initPieChart(dc.pieChart("#age-chart-level"), levelDimension, levelGroup);

        dc.renderAll();
        /*
        var id;
        $(window).resize(function(e) {
            clearTimeout(id);
            id = setTimeout(doneResizing, 500);
        });
        function doneResizing(){
            var container = $('#age-chart-distribution').parent();
            var w = container.width();
            $('#age-chart-distribution svg').attr('width', w);
            $('#age-chart-distribution2 svg').attr('width', w);
            dc.renderAll();
            dc.redrawAll();
        }*/
    </script>
}